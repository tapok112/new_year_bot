import json

from aiogram import F, Bot
from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup
from aiogram.types import Message, FSInputFile

from bot.config_reader import conf
from bot.keyboards.cancel import cancel_button, cancel_cmd
from bot.keyboards.questions import question_keyboard, question_cmds
from bot.keyboards.start import start_keyboard, start_cmds

question_router = Router()

with open("bot/questions.json", "r", encoding="utf-8") as file:
    questions_data = json.load(file)

class QuizStates(StatesGroup):
    start = State()
    first = State()
    second = State()
    complete = State()


@question_router.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    await state.set_state(QuizStates.start)
    await message.answer(
        "‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è‚òÉÔ∏è\n"
        "\n"
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–ú–∞—à–∞ –∏ –î–∏–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –Ω–µ–±–æ–ª—å—à–æ–π –∫–≤–µ—Å—Ç, –∫–æ–≥–¥–∞ —Ç—ã –æ—Ç–≤–µ—Ç–∏—à—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–µ–±–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏–∏ —Ç–≤–æ–µ–≥–æ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞!üéÅ\n"
        "–ï—Å–ª–∏ –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É!\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –∏–ª–∏ –Ω–∞—á–∞—Ç—å –±–ª–∏—Ü –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /start"
        "\n"
        "üç¨üç¨üç¨üç¨üç¨",
        reply_markup=start_keyboard(start_cmds)
    )

@question_router.callback_query(F.data.casefold() == "–ø–æ–¥—Å–∫–∞–∑–∫–∞")
async def cmd_hint(callback: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        hint = questions_data[callback.from_user.username]["questions"][current_state.split(":")[1]]["help"]

        if hint is None:
            await callback.message.answer(f"‚úñÔ∏è–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            await callback.message.answer(
                "‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: \n"
                f"{hint}")

@question_router.callback_query(F.data.casefold() == "–≥–æ—Ç–æ–≤")
async def process_start(callback: types.CallbackQuery, state: FSMContext, bot: Bot) -> None:
    await callback.message.edit_reply_markup()
    await state.set_state(QuizStates.first)
    await bot.send_message(chat_id=conf.bot.admin,
                           text=f"{callback.from_user.first_name} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥")
    answer = await callback.message.answer(
        questions_data[callback.from_user.username]["questions"]["first"]["question"],
        reply_markup=question_keyboard(question_cmds)
    )
    await state.update_data(answer=answer)


@question_router.message(Command("cancel"))
@question_router.callback_query(F.data.casefold() == "–Ω—É –Ω–∞—Ö–µ—Ä")
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot) -> None:
    await callback.message.edit_reply_markup()
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await bot.send_message(chat_id=conf.bot.admin,
                           text=f"{callback.from_user.first_name} –ø—Ä–µ—Ä–≤–∞–ª –±–ª–∏—Ü —Å {current_state}")
    await callback.message.answer(
        "üëæ –í–æ–∑–≤—Ä–∞—â–∞—è–π—Å—è! –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è üëæ"
    )


@question_router.message(QuizStates.first)
async def process_question1(message: Message, state: FSMContext, bot: Bot) -> None:
    user_data = await state.get_data()
    await user_data['answer'].edit_reply_markup()

    answers = questions_data[message.from_user.username]["questions"]["first"]["answer"]
    if message.text.lower() in answers:
        await state.set_state(QuizStates.second)
        await bot.send_message(chat_id=conf.bot.admin,
                               text=f"{message.from_user.first_name} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –≤—Ç–æ—Ä–æ–π —à–∞–≥")
        answer = await message.answer(
            questions_data[message.from_user.username]["questions"]["second"]["question"],
            reply_markup=question_keyboard(question_cmds)
        )
        await state.update_data(answer=answer)
    else:
        await bot.send_message(chat_id=conf.bot.admin,
                               text=f"{message.from_user.first_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ")
        await message.reply(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Å–∫–∞–∑–∫–∞'.",
            reply_markup=question_keyboard(question_cmds)
        )


@question_router.message(QuizStates.second)
async def process_question2(message: Message, state: FSMContext, bot: Bot) -> None:
    user_data = await state.get_data()
    await user_data['answer'].edit_reply_markup()

    answers = questions_data[message.from_user.username]["questions"]["second"]["answer"]
    if message.text.lower() in answers:
        await state.set_state(QuizStates.complete)
        await bot.send_message(chat_id=conf.bot.admin,
                               text=f"{message.from_user.first_name} –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã")
        latitude = questions_data[message.from_user.username]["complete"]["latitude"]
        longitude = questions_data[message.from_user.username]["complete"]["longitude"]
        location = types.Location(latitude=latitude, longitude=longitude)
        # photo_path = questions_data[message.from_user.username]["complete"]["photo"]
        code = questions_data[message.from_user.username]["complete"]["code"]

        await message.answer(
            "ü•≥ü•≥ü•≥ü•≥ü•≥\n"
            "–£—Å–ø–µ—Ö, –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã. –ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è, –≥–¥–µ –ª–µ–∂–∏—Ç –ø–æ–¥–∞—Ä–æ–∫.\n"
            f"–¢–≤–æ–π –∫–æ–¥: {code}\n"
            "–¢–µ–±—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –¥–µ–¥ –º–æ—Ä–æ–∑ –≤ –∫—Ä–∞—Å–Ω–æ–π —Ñ—É—Ç–±–æ–ª–∫–µ, –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å –Ω–∏–º –∏ —Å–∫–∞–∂–∏ 'I need my present'\n"
            "P.S –î–µ–¥ –º–æ—Ä–æ–∑ –º–æ–∂–µ—Ç –Ω–∞–ø—É—Ç–∞—Ç—å!\n"
            "–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—à—å –ø–∞–∫–µ—Ç–∏–∫, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–∞ –Ω–µ–º –Ω–∞–ø–∏—Å–∞–Ω —Ç–≤–æ–π –∫–æ–¥."
            )
        await message.answer_location(location.latitude, location.longitude)

        # image = FSInputFile(photo_path)
        # await message.answer_photo(
        #     image,
        #     caption=f"–≠—Ç–æ —Ñ–æ—Ç–æ –¥–µ–¥–∞ –º–æ—Ä–æ–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–¥–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏!"
        # )

        answer = await message.answer(
            "üì∑üì∑üì∑üì∑üì∑\n"
            "–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ –¥–æ–≤–æ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–∞—Ä–∫–æ–º, —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ –î–∏–º–µ –∏ –ú–∞—à–µ.",
            reply_markup=cancel_button(cancel_cmd)
        )
        await state.update_data(answer=answer)
    else:
        await bot.send_message(chat_id=conf.bot.admin,
                               text=f"{message.from_user.first_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞ –≤—Ç–æ—Ä–æ–º —à–∞–≥–µ")
        await message.reply(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Å–∫–∞–∑–∫–∞'.",
            reply_markup=question_keyboard(question_cmds)
        )

@question_router.message(QuizStates.complete)
async def take_a_photo(message: Message, bot: Bot, state: FSMContext) -> None:
    user_data = await state.get_data()
    await user_data['answer'].edit_reply_markup()

    photo = message.photo[-1].file_id
    if message.photo:
        await bot.send_photo(chat_id=conf.bot.admin,photo=photo)

        await message.answer(
            "üíúüíúüíúüíúüíú\n"
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–æ–≤—ã–º –≥–æ–¥–æ–º, –ø—É—Å—Ç—å –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è, –∞ –≤—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è!\n"
            "–£–≤–∏–¥–∏–º—Å—è –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É!!!\n"
            "‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è"
        )
    else:
        await message.reply(
            "–ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –Ω–∞–¥–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù—É –Ω–∞—Ö–µ—Ä'.",
            reply_markup=cancel_button(cancel_cmd)
        )


